{"version":3,"sources":["redux/contacts/contactAction.js","redux/contacts/contactReducer.js","redux/contacts/rootReducer.js","redux/store.js","redux/contacts/contactOperations.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/SingleContact/SingleContact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App/App.js","index.js"],"names":["getContactsRequest","createAction","getContactsSeccess","getContactsError","addContactRequest","addContactSeccess","addContactError","deleteContactRequest","deleteContactSeccess","deleteContactError","handleFilter","payload","target","value","items","createReducer","state","filter","contact","id","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","axios","defaults","baseURL","itemsSelector","filterSelector","getFilteredContact","toLowerCase","name","includes","ContactForm","formInitialState","number","alert","inputHandler","setState","submitHandler","e","preventDefault","props","find","toggleAlert","reset","addContact","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","dispatch","a","post","result","data","connect","ownProps","contactId","getContactById","deleteContact","delete","TransitionGroup","component","map","key","App","animation","onGetContacts","appear","length","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3474c94.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nexport const getContactsRequest = createAction(\"@contact/getRequest\");\nexport const getContactsSeccess = createAction(\"@contact/getSeccess\");\nexport const getContactsError = createAction(\"@contact/getError\");\n\nexport const addContactRequest = createAction(\"@contact/addRequest\");\nexport const addContactSeccess = createAction(\"@contact/addSeccess\");\nexport const addContactError = createAction(\"@contact/addError\");\n\nexport const deleteContactRequest = createAction(\"@contact/deleteRequest\");\nexport const deleteContactSeccess = createAction(\"@contact/deleteSeccess\");\nexport const deleteContactError = createAction(\"@contact/deleteError\");\n\nexport const handleFilter = createAction(\"@contact/filter\", ({ target }) => ({\n  payload: target.value,\n}));\n\n// export const addContact = createAction(ADD_CONTACT, (name, number) => ({\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// }));\n\n// export const deleteContact = createAction(DELETE_CONTACT);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addContactSeccess,\n  getContactsSeccess,\n  deleteContactSeccess,\n  handleFilter,\n} from \"./contactAction\";\n\nconst removeContact = (state, { payload }) =>\n  state.filter((contact) => contact.id !== payload);\n\nexport const items = createReducer([], {\n  [getContactsSeccess]: (state, { payload }) => payload,\n  [addContactSeccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSeccess]: removeContact,\n});\n\nexport const filter = createReducer(\"\", {\n  [handleFilter]: (state, { payload }) => (state = payload),\n});\n","import { combineReducers } from \"redux\";\nimport { items, filter } from \"./contactReducer\";\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./contacts/rootReducer\";\n\nconst store = configureStore({\n  reducer: { contacts: rootReducer },\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport default store;\n","import axios from \"axios\";\nimport {\n  addContactRequest,\n  addContactSeccess,\n  addContactError,\n  getContactsRequest,\n  getContactsSeccess,\n  getContactsError,\n  deleteContactRequest,\n  deleteContactSeccess,\n  deleteContactError,\n} from \"./contactAction\";\n\naxios.defaults.baseURL = \"http://localhost:2000\";\n\nexport const getContacts = () => async (dispatch) => {\n  dispatch(getContactsRequest());\n  try {\n    const result = await axios.get(\"/contacts\");\n    dispatch(getContactsSeccess(result.data));\n  } catch (error) {\n    dispatch(getContactsError(error));\n  }\n};\n\nexport const addContact = (name, number) => async (dispatch) => {\n  dispatch(addContactRequest());\n  try {\n    const result = await axios.post(\"/contacts\", {\n      name,\n      number,\n    });\n    dispatch(addContactSeccess(result.data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nexport const deleteContact = (id) => async (dispatch) => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSeccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n","export const itemsSelector = (state) => state.contacts.items;\nexport const filterSelector = (state) => state.contacts.filter;\n\nexport const getFilteredContact = (state) => {\n  const items = itemsSelector(state);\n  const filter = filterSelector(state).toLowerCase();\n\n  return items.filter((contact) => contact.name.toLowerCase().includes(filter));\n};\n\nexport const getContactById = (state, contactId) => {\n  const items = itemsSelector(state);\n\n  return items.find((contact) => contact.id === contactId);\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport { addContact } from \"../../redux/contacts/contactOperations\";\nimport {\n  filterSelector,\n  itemsSelector,\n} from \"../../redux/contacts/contactsSelectors\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = (e) => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const isExists = contacts.find((contact) => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    this.props.addContact(name, number);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = (status) => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"Alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"AlertBtn\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"ContactsForm\" onSubmit={this.submitHandler}>\n          <label className=\"InputName\">\n            Name\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <label className=\"InputName\">\n            Number\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <button type=\"submit\" className=\"SubmitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: itemsSelector(state),\n  filter: filterSelector(state),\n});\n\nconst mapDispatchToProps = {\n  addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { deleteContact } from \"../../redux/contacts/contactOperations\";\nimport \"./SingleContact.css\";\nimport { getContactById } from \"../../redux/contacts/contactsSelectors\";\n\nconst SingleContact = ({ name, number, deleteContact }) => {\n  return (\n    <li className=\"Contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button className=\"DelBtn\" type=\"button\" onClick={deleteContact}>\n        &#10008;\n      </button>\n    </li>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const contact = getContactById(state, ownProps.id);\n\n  return { ...contact };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\n\nSingleContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport { getFilteredContact } from \"../../redux/contacts/contactsSelectors\";\nimport SingleContact from \"../SingleContact/SingleContact\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList\">\n      {contacts.map(({ id }) => (\n        <CSSTransition key={id} classNames=\"ListItem\" timeout={250}>\n          <SingleContact id={id} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: getFilteredContact(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { handleFilter } from \"../../redux/contacts/contactAction\";\nimport { filterSelector } from \"../../redux/contacts/contactsSelectors\";\nimport \"./Filter.css\";\n\nconst Filter = ({ filter, handleFilter }) => {\n  return (\n    <div className=\"FilterBox\">\n      <label className=\"InputLabel\">\n        Find contacts by name\n        <br />\n        <input\n          className=\"FilterForm\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: filterSelector(state),\n});\n\nconst mapDispatchToProps = {\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    }).isRequired\n  ),\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { getContacts } from \"../../redux/contacts/contactOperations\";\nimport { itemsSelector } from \"../../redux/contacts/contactsSelectors\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.props.onGetContacts();\n    this.setState((state) => ({\n      animation: !state.animation,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"Title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"AppTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n\n        {this.props.contacts.length === 0 && (\n          <>\n            <h2 className=\"ContactTitle\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"FilterAnimation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter />\n        </CSSTransition>\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: itemsSelector(state),\n});\n\nconst mapDispatchToProps = {\n  onGetContacts: getContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}